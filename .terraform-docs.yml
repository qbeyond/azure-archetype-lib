formatter: "markdown"

# Tested with this version
# As Majorversion is 0 any change may break
version: ">=0.16.0"

sections:
  hide:
    - header
    - providers

output:
  file: "README.md"
  mode: inject

sort:
  enabled: true
  by: required

content: |-
  {{- define "setDict" -}}
    {{- $resource := list -}}
    {{- if hasKey .Dict .Key -}}
      {{- $resource = get .Dict .Key -}}
    {{- else -}}
       {{- $resource = list -}}
    {{- end -}}
    {{- $resource := append $resource .Resource -}}
    {{- $_ := set .Dict .Key $resource -}}
  {{- end -}}
  
  {{- $filesResources := dict -}}
  {{- $resourceTypes := dict -}}
  {{- range .Module.Resources -}}
    {{- template "setDict" dict "Dict" $filesResources "Key" .Position.Filename "Resource" . -}}
    {{- $isResource := eq "resource" (printf "%s" .GetMode) -}}
    {{- if $isResource -}}
      {{- template "setDict" dict "Dict" $resourceTypes "Key" (printf "%s_%s" .ProviderName .Type) "Resource" . -}}
    {{- end -}}
  {{- end -}}
  {{ indent 0 "#" }}
  
  # Archetype Library

  ## Introduction
  This [repository](https://github.com/qbeyond/terraform-azurerm-archetype-lib) is our central library of custom policy (set) definitions. Policies defined here will be usable by CAF archetypes.
  Over this Module, named [archetype-lib](https://registry.terraform.io/modules/qbeyond/archetype-lib/azurerm/latest), all q.beyond archetype-, policy-, policy set- and roledefinitions and policy assignments will be summarized in one folder with all the azurerm compatible definitions and assignments.
  That folder will containin the external and the q.beyond definitions and assignments. The planed usecase is to hand the output `merged_library` of this Module to the CAF-Module, as it can only handle one Folder as input containing definitions and assignements.
  
  ## Root Repository Structure
  - archetypes is a folder just containing archetype definitions: no subfolders, the name serves as description
  - The main categories used by archetypes: policy_definition, role_definitions
    - they each contain folders named by the topics that the policys or roles are for
      - they each can contain a folder with tests for them selfs
      - they each contain their needed policy-, policy set- and roledefinitions and policy assignments
  - .tf files that are the archetype-lib module
  - folder for examples
    - contains folders of examples on how to use this module. Each example is described in this README under "Examples"


  ## Examples

  ### Basic
  First, the given template is adding this Module as `archetype_lib`. The Path of the library that is supposed to be summarized with the q.beyond library, is set as the value of `cutomer_lib`. 
  The output ´file_names´ can be used to manualy check whether all files that are supposed to be included in the merged library are included, as it outputs the names of all files that were added.
  The output of `merged_library` is supposed to be the input for the [CAF-Module](https://registry.terraform.io/modules/Azure/caf-enterprise-scale/azurerm/latest) for the parameter named `archetype_lib`
  
  ```hcl
  {{ include "examples/basic/main.tf" }}
  ```


  {{ .Requirements }}
  {{ .Providers }}
  {{ .Inputs }}
  {{ .Outputs }}
  {{ if .Config.Sections.Resources -}}
    {{- if not (keys $resourceTypes) -}}
        {{- if not .Config.Settings.HideEmpty -}}
            {{- indent 0 "#" }} Resource types
            No resources.
        {{ end }}
      {{ else }}
        {{ indent 0 "#" }} Resource types
        | Type | Used |
        |------|-------|
        {{- range $type,$resources := $resourceTypes }}
          {{- $url := (first $resources).URL -}}
          {{- $type = ternary $url (printf "[%s](%s)" $type $url) $type }}
          | {{ $type }} | {{ len $resources }} |
        {{- end }}
        **`Used` only includes resource blocks.** `for_each` and `count` meta arguments, as well as resource blocks of modules are not considered.
      {{ end }}
  {{ end -}}
  {{ .Modules }}
  {{ if or .Config.Sections.Resources .Config.Sections.DataSources -}}
      {{- if not (keys $filesResources) -}}
          {{- if not .Config.Settings.HideEmpty -}}
              {{ indent 0 "#" }} Resources by Files
              No resources.
          {{ end }}
      {{ else }}
          {{ indent 0 "#" }} Resources by Files
          {{- range $fileName,$resources := $filesResources }}
              {{ indent 1 "#" }} {{ $fileName }}
              | Name | Type |
              |------|------|
              
              {{- range $resources -}}
                {{- $isResource := and $.Config.Sections.Resources ( eq "resource" (printf "%s" .GetMode)) }}
                {{- $isDataResource := and $.Config.Sections.DataSources ( eq "data source" (printf "%s" .GetMode)) }}
                {{- if or $isResource $isDataResource }}
                    {{- $fullspec := ternary .URL (printf "[%s](%s)" .Spec .URL) .Spec }}
                    | {{ $fullspec }} | {{ .GetMode }} |
                {{- end }}
              {{- end -}}
          {{- end }}
      {{ end }}
  {{- end -}}